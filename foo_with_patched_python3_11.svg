<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1286.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1269" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1269" > </text>
<g id="frames">
<g >
<title>do_mmap (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1109" width="58.5" height="15.0" fill="rgb(232,8,20)" rx="2" ry="2" />
<text  x="1134.48" y="1119.5" >do_mmap</text>
</g>
<g >
<title>Py_InitializeFromConfig (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1109" width="123.8" height="15.0" fill="rgb(230,160,16)" rx="2" ry="2" />
<text  x="1010.75" y="1119.5" >Py_InitializeFr..</text>
</g>
<g >
<title>search_binary_handler (429,862 samples, 0.06%)</title><rect x="10.0" y="1125" width="0.7" height="15.0" fill="rgb(216,148,30)" rx="2" ry="2" />
<text  x="13.00" y="1135.5" ></text>
</g>
<g >
<title>_PyFunction_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="293" width="123.8" height="15.0" fill="rgb(210,216,8)" rx="2" ry="2" />
<text  x="1010.75" y="303.5" >_PyFunction_Vec..</text>
</g>
<g >
<title>_PyFunction_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="789" width="123.8" height="15.0" fill="rgb(243,160,39)" rx="2" ry="2" />
<text  x="1010.75" y="799.5" >_PyFunction_Vec..</text>
</g>
<g >
<title>PyObject_Free (290,763,491 samples, 37.44%)</title><rect x="509.3" y="645" width="441.8" height="15.0" fill="rgb(240,21,9)" rx="2" ry="2" />
<text  x="512.32" y="655.5" >PyObject_Free</text>
</g>
<g >
<title>builtin___import___impl (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="949" width="123.8" height="15.0" fill="rgb(219,52,28)" rx="2" ry="2" />
<text  x="1010.75" y="959.5" >builtin___impor..</text>
</g>
<g >
<title>pymain_init (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1125" width="123.8" height="15.0" fill="rgb(231,40,32)" rx="2" ry="2" />
<text  x="1010.75" y="1135.5" >pymain_init</text>
</g>
<g >
<title>__perf_addr_filters_adjust (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1045" width="58.5" height="15.0" fill="rgb(234,72,41)" rx="2" ry="2" />
<text  x="1134.48" y="1055.5" >__perf..</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="581" width="123.8" height="15.0" fill="rgb(248,182,38)" rx="2" ry="2" />
<text  x="1010.75" y="591.5" >_PyEval_EvalFra..</text>
</g>
<g >
<title>PyEval_EvalCode (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="373" width="123.8" height="15.0" fill="rgb(253,104,31)" rx="2" ry="2" />
<text  x="1010.75" y="383.5" >PyEval_EvalCode</text>
</g>
<g >
<title>vm_mmap_pgoff (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1125" width="58.5" height="15.0" fill="rgb(234,216,52)" rx="2" ry="2" />
<text  x="1134.48" y="1135.5" >vm_mma..</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="741" width="123.8" height="15.0" fill="rgb(214,116,37)" rx="2" ry="2" />
<text  x="1010.75" y="751.5" >_PyEval_EvalFra..</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (656,233,356 samples, 84.50%)</title><rect x="10.7" y="773" width="997.0" height="15.0" fill="rgb(229,207,34)" rx="2" ry="2" />
<text  x="13.65" y="783.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>pyinit_main (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1093" width="123.8" height="15.0" fill="rgb(224,198,21)" rx="2" ry="2" />
<text  x="1010.75" y="1103.5" >pyinit_main</text>
</g>
<g >
<title>PyGILState_Check (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="53" width="123.8" height="15.0" fill="rgb(246,173,1)" rx="2" ry="2" />
<text  x="1010.75" y="63.5" >PyGILState_Check</text>
</g>
<g >
<title>_abc__abc_register_impl (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="181" width="123.8" height="15.0" fill="rgb(234,151,3)" rx="2" ry="2" />
<text  x="1010.75" y="191.5" >_abc__abc_regis..</text>
</g>
<g >
<title>_PyFunction_Vectorcall (656,233,356 samples, 84.50%)</title><rect x="10.7" y="821" width="997.0" height="15.0" fill="rgb(213,222,44)" rx="2" ry="2" />
<text  x="13.65" y="831.5" >_PyFunction_Vectorcall</text>
</g>
<g >
<title>Py_RunMain (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1125" width="997.0" height="15.0" fill="rgb(230,0,49)" rx="2" ry="2" />
<text  x="13.65" y="1135.5" >Py_RunMain</text>
</g>
<g >
<title>[libc-2.31.so] (35,986,618 samples, 4.63%)</title><rect x="341.4" y="597" width="54.6" height="15.0" fill="rgb(219,18,43)" rx="2" ry="2" />
<text  x="344.37" y="607.5" >[libc..</text>
</g>
<g >
<title>PyThread_tss_get (35,981,793 samples, 4.63%)</title><rect x="622.8" y="581" width="54.6" height="15.0" fill="rgb(248,30,11)" rx="2" ry="2" />
<text  x="625.76" y="591.5" >PyThr..</text>
</g>
<g >
<title>PyImport_Import (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1029" width="123.8" height="15.0" fill="rgb(210,127,16)" rx="2" ry="2" />
<text  x="1010.75" y="1039.5" >PyImport_Import</text>
</g>
<g >
<title>cfunction_vectorcall_FASTCALL (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="213" width="123.8" height="15.0" fill="rgb(251,63,16)" rx="2" ry="2" />
<text  x="1010.75" y="223.5" >cfunction_vecto..</text>
</g>
<g >
<title>PyGILState_Check (72,024,001 samples, 9.27%)</title><rect x="568.0" y="613" width="109.4" height="15.0" fill="rgb(241,108,25)" rx="2" ry="2" />
<text  x="571.00" y="623.5" >PyGILState_Ch..</text>
</g>
<g >
<title>pymain_run_file_obj (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1077" width="997.0" height="15.0" fill="rgb(247,162,51)" rx="2" ry="2" />
<text  x="13.65" y="1087.5" >pymain_run_file_obj</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (656,233,356 samples, 84.50%)</title><rect x="10.7" y="933" width="997.0" height="15.0" fill="rgb(239,180,24)" rx="2" ry="2" />
<text  x="13.65" y="943.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>PyObject_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="309" width="123.8" height="15.0" fill="rgb(207,102,7)" rx="2" ry="2" />
<text  x="1010.75" y="319.5" >PyObject_Vector..</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (656,233,356 samples, 84.50%)</title><rect x="10.7" y="693" width="997.0" height="15.0" fill="rgb(238,120,30)" rx="2" ry="2" />
<text  x="13.65" y="703.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>_PyObject_CallFunctionVa (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="997" width="123.8" height="15.0" fill="rgb(249,153,15)" rx="2" ry="2" />
<text  x="1010.75" y="1007.5" >_PyObject_CallF..</text>
</g>
<g >
<title>python (776,182,083 samples, 99.94%)</title><rect x="10.7" y="1221" width="1179.3" height="15.0" fill="rgb(210,218,34)" rx="2" ry="2" />
<text  x="13.65" y="1231.5" >python</text>
</g>
<g >
<title>strcmp (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1205" width="58.5" height="15.0" fill="rgb(208,17,54)" rx="2" ry="2" />
<text  x="1134.48" y="1215.5" >strcmp</text>
</g>
<g >
<title>cfunction_vectorcall_FASTCALL_KEYWORDS (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="421" width="123.8" height="15.0" fill="rgb(234,203,45)" rx="2" ry="2" />
<text  x="1010.75" y="431.5" >cfunction_vecto..</text>
</g>
<g >
<title>PyThread_tss_get (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="37" width="123.8" height="15.0" fill="rgb(231,62,22)" rx="2" ry="2" />
<text  x="1010.75" y="47.5" >PyThread_tss_get</text>
</g>
<g >
<title>_PyEval_Vector (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="693" width="123.8" height="15.0" fill="rgb(238,60,35)" rx="2" ry="2" />
<text  x="1010.75" y="703.5" >_PyEval_Vector</text>
</g>
<g >
<title>object_dealloc (290,763,491 samples, 37.44%)</title><rect x="509.3" y="661" width="441.8" height="15.0" fill="rgb(227,208,5)" rx="2" ry="2" />
<text  x="512.32" y="671.5" >object_dealloc</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (656,233,356 samples, 84.50%)</title><rect x="10.7" y="853" width="997.0" height="15.0" fill="rgb(219,199,29)" rx="2" ry="2" />
<text  x="13.65" y="863.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>py::_find_and_load:&lt;frozen importlib._bootstrap&gt; (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="837" width="123.8" height="15.0" fill="rgb(250,223,31)" rx="2" ry="2" />
<text  x="1010.75" y="847.5" >py::_find_and_l..</text>
</g>
<g >
<title>_PyMem_DebugRawFree (108,148,323 samples, 13.93%)</title><rect x="732.1" y="613" width="164.3" height="15.0" fill="rgb(242,223,46)" rx="2" ry="2" />
<text  x="735.12" y="623.5" >_PyMem_DebugRawFree</text>
</g>
<g >
<title>_PyObject_Call (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="453" width="123.8" height="15.0" fill="rgb(244,74,43)" rx="2" ry="2" />
<text  x="1010.75" y="463.5" >_PyObject_Call</text>
</g>
<g >
<title>py::baz:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py (656,233,356 samples, 84.50%)</title><rect x="10.7" y="869" width="997.0" height="15.0" fill="rgb(241,48,17)" rx="2" ry="2" />
<text  x="13.65" y="879.5" >py::baz:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py</text>
</g>
<g >
<title>PyObject_CallMethodObjArgs (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="901" width="123.8" height="15.0" fill="rgb(237,202,54)" rx="2" ry="2" />
<text  x="1010.75" y="911.5" >PyObject_CallMe..</text>
</g>
<g >
<title>_PyEval_Vector (656,233,356 samples, 84.50%)</title><rect x="10.7" y="965" width="997.0" height="15.0" fill="rgb(209,32,1)" rx="2" ry="2" />
<text  x="13.65" y="975.5" >_PyEval_Vector</text>
</g>
<g >
<title>perf_event_exec (429,862 samples, 0.06%)</title><rect x="10.0" y="1077" width="0.7" height="15.0" fill="rgb(207,27,24)" rx="2" ry="2" />
<text  x="13.00" y="1087.5" ></text>
</g>
<g >
<title>_PyGILState_GetThisThreadState (35,981,793 samples, 4.63%)</title><rect x="622.8" y="597" width="54.6" height="15.0" fill="rgb(238,55,28)" rx="2" ry="2" />
<text  x="625.76" y="607.5" >_PyGI..</text>
</g>
<g >
<title>PyImport_ImportModule (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1045" width="123.8" height="15.0" fill="rgb(205,127,15)" rx="2" ry="2" />
<text  x="1010.75" y="1055.5" >PyImport_Import..</text>
</g>
<g >
<title>PyObject_Vectorcall (656,233,356 samples, 84.50%)</title><rect x="10.7" y="757" width="997.0" height="15.0" fill="rgb(227,159,43)" rx="2" ry="2" />
<text  x="13.65" y="767.5" >PyObject_Vectorcall</text>
</g>
<g >
<title>pymain_main (737,666,026 samples, 94.99%)</title><rect x="10.7" y="1141" width="1120.8" height="15.0" fill="rgb(205,144,38)" rx="2" ry="2" />
<text  x="13.65" y="1151.5" >pymain_main</text>
</g>
<g >
<title>Py_BytesMain (737,666,026 samples, 94.99%)</title><rect x="10.7" y="1157" width="1120.8" height="15.0" fill="rgb(206,219,52)" rx="2" ry="2" />
<text  x="13.65" y="1167.5" >Py_BytesMain</text>
</g>
<g >
<title>_PyMem_DebugFree (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="69" width="123.8" height="15.0" fill="rgb(241,122,6)" rx="2" ry="2" />
<text  x="1010.75" y="79.5" >_PyMem_DebugFree</text>
</g>
<g >
<title>do_syscall_64 (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1173" width="58.5" height="15.0" fill="rgb(215,43,32)" rx="2" ry="2" />
<text  x="1134.48" y="1183.5" >do_sys..</text>
</g>
<g >
<title>PyObject_Malloc (37,273,592 samples, 4.80%)</title><rect x="951.1" y="629" width="56.6" height="15.0" fill="rgb(243,96,13)" rx="2" ry="2" />
<text  x="954.11" y="639.5" >PyObj..</text>
</g>
<g >
<title>perf_iterate_ctx (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1061" width="58.5" height="15.0" fill="rgb(224,222,33)" rx="2" ry="2" />
<text  x="1134.48" y="1071.5" >perf_i..</text>
</g>
<g >
<title>perf (429,862 samples, 0.06%)</title><rect x="10.0" y="1221" width="0.7" height="15.0" fill="rgb(233,63,29)" rx="2" ry="2" />
<text  x="13.00" y="1231.5" ></text>
</g>
<g >
<title>_PyMem_DebugCheckAddress (72,169,499 samples, 9.29%)</title><rect x="732.1" y="597" width="109.7" height="15.0" fill="rgb(207,138,36)" rx="2" ry="2" />
<text  x="735.12" y="607.5" >_PyMem_DebugC..</text>
</g>
<g >
<title>_PyEval_Vector (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="533" width="123.8" height="15.0" fill="rgb(227,77,27)" rx="2" ry="2" />
<text  x="1010.75" y="543.5" >_PyEval_Vector</text>
</g>
<g >
<title>__x64_sys_execve (429,862 samples, 0.06%)</title><rect x="10.0" y="1157" width="0.7" height="15.0" fill="rgb(234,221,2)" rx="2" ry="2" />
<text  x="13.00" y="1167.5" ></text>
</g>
<g >
<title>builtin___import__ (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="965" width="123.8" height="15.0" fill="rgb(222,50,40)" rx="2" ry="2" />
<text  x="1010.75" y="975.5" >builtin___impor..</text>
</g>
<g >
<title>builtin_exec (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="405" width="123.8" height="15.0" fill="rgb(246,53,15)" rx="2" ry="2" />
<text  x="1010.75" y="415.5" >builtin_exec</text>
</g>
<g >
<title>import_find_and_load (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="917" width="123.8" height="15.0" fill="rgb(206,28,9)" rx="2" ry="2" />
<text  x="1010.75" y="927.5" >import_find_and..</text>
</g>
<g >
<title>_PyRun_AnyFileObject (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1061" width="997.0" height="15.0" fill="rgb(250,66,48)" rx="2" ry="2" />
<text  x="13.65" y="1071.5" >_PyRun_AnyFileObject</text>
</g>
<g >
<title>object_issubclass (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="149" width="123.8" height="15.0" fill="rgb(244,85,18)" rx="2" ry="2" />
<text  x="1010.75" y="159.5" >object_issubclass</text>
</g>
<g >
<title>_PyRun_SimpleFileObject (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1045" width="997.0" height="15.0" fill="rgb(232,131,2)" rx="2" ry="2" />
<text  x="13.65" y="1055.5" >_PyRun_SimpleFileObject</text>
</g>
<g >
<title>object_vacall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="885" width="123.8" height="15.0" fill="rgb(237,135,2)" rx="2" ry="2" />
<text  x="1010.75" y="895.5" >object_vacall</text>
</g>
<g >
<title>PyObject_Call (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="469" width="123.8" height="15.0" fill="rgb(252,181,45)" rx="2" ry="2" />
<text  x="1010.75" y="479.5" >PyObject_Call</text>
</g>
<g >
<title>py::_call_with_frames_removed:&lt;frozen importlib._bootstrap&gt; (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="517" width="123.8" height="15.0" fill="rgb(247,172,17)" rx="2" ry="2" />
<text  x="1010.75" y="527.5" >py::_call_with_..</text>
</g>
<g >
<title>null (737,666,026 samples, 94.99%)</title><rect x="10.7" y="1189" width="1120.8" height="15.0" fill="rgb(212,186,17)" rx="2" ry="2" />
<text  x="13.65" y="1199.5" >null</text>
</g>
<g >
<title>_PyEval_Vector (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="277" width="123.8" height="15.0" fill="rgb(233,14,50)" rx="2" ry="2" />
<text  x="1010.75" y="287.5" >_PyEval_Vector</text>
</g>
<g >
<title>_PyFunction_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="869" width="123.8" height="15.0" fill="rgb(223,172,12)" rx="2" ry="2" />
<text  x="1010.75" y="879.5" >_PyFunction_Vec..</text>
</g>
<g >
<title>_PyVectorcall_Call (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="437" width="123.8" height="15.0" fill="rgb(240,159,31)" rx="2" ry="2" />
<text  x="1010.75" y="447.5" >_PyVectorcall_C..</text>
</g>
<g >
<title>PyObject_CallFunction (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1013" width="123.8" height="15.0" fill="rgb(246,204,14)" rx="2" ry="2" />
<text  x="1010.75" y="1023.5" >PyObject_CallFu..</text>
</g>
<g >
<title>builtin_exec_impl (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="389" width="123.8" height="15.0" fill="rgb(252,199,21)" rx="2" ry="2" />
<text  x="1010.75" y="399.5" >builtin_exec_impl</text>
</g>
<g >
<title>[unknown] (429,862 samples, 0.06%)</title><rect x="10.0" y="1205" width="0.7" height="15.0" fill="rgb(209,222,0)" rx="2" ry="2" />
<text  x="13.00" y="1215.5" ></text>
</g>
<g >
<title>PyObject_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="725" width="123.8" height="15.0" fill="rgb(215,64,51)" rx="2" ry="2" />
<text  x="1010.75" y="735.5" >PyObject_Vector..</text>
</g>
<g >
<title>_start (737,666,026 samples, 94.99%)</title><rect x="10.7" y="1205" width="1120.8" height="15.0" fill="rgb(251,205,17)" rx="2" ry="2" />
<text  x="13.65" y="1215.5" >_start</text>
</g>
<g >
<title>init_interp_main (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1077" width="123.8" height="15.0" fill="rgb(227,149,54)" rx="2" ry="2" />
<text  x="1010.75" y="1087.5" >init_interp_main</text>
</g>
<g >
<title>_abc__abc_register (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="197" width="123.8" height="15.0" fill="rgb(246,217,17)" rx="2" ry="2" />
<text  x="1010.75" y="207.5" >_abc__abc_regis..</text>
</g>
<g >
<title>_PyMem_DebugMalloc (37,273,592 samples, 4.80%)</title><rect x="951.1" y="613" width="56.6" height="15.0" fill="rgb(219,0,47)" rx="2" ry="2" />
<text  x="954.11" y="623.5" >_PyMe..</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="661" width="123.8" height="15.0" fill="rgb(219,178,50)" rx="2" ry="2" />
<text  x="1010.75" y="671.5" >_PyEval_EvalFra..</text>
</g>
<g >
<title>_PyEval_Vector (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="613" width="123.8" height="15.0" fill="rgb(254,152,44)" rx="2" ry="2" />
<text  x="1010.75" y="623.5" >_PyEval_Vector</text>
</g>
<g >
<title>load_elf_binary (429,862 samples, 0.06%)</title><rect x="10.0" y="1109" width="0.7" height="15.0" fill="rgb(211,88,11)" rx="2" ry="2" />
<text  x="13.00" y="1119.5" ></text>
</g>
<g >
<title>_Py_Dealloc (327,405,085 samples, 42.16%)</title><rect x="453.6" y="677" width="497.5" height="15.0" fill="rgb(208,49,29)" rx="2" ry="2" />
<text  x="456.65" y="687.5" >_Py_Dealloc</text>
</g>
<g >
<title>do_syscall_64 (429,862 samples, 0.06%)</title><rect x="10.0" y="1173" width="0.7" height="15.0" fill="rgb(242,143,11)" rx="2" ry="2" />
<text  x="13.00" y="1183.5" ></text>
</g>
<g >
<title>_PyMem_DebugMalloc (109,877,031 samples, 14.15%)</title><rect x="286.7" y="629" width="166.9" height="15.0" fill="rgb(230,75,20)" rx="2" ry="2" />
<text  x="289.70" y="639.5" >_PyMem_DebugMalloc</text>
</g>
<g >
<title>read_size_t (35,982,173 samples, 4.63%)</title><rect x="896.4" y="613" width="54.7" height="15.0" fill="rgb(216,23,30)" rx="2" ry="2" />
<text  x="899.44" y="623.5" >read_..</text>
</g>
<g >
<title>method_dealloc (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="117" width="123.8" height="15.0" fill="rgb(212,226,2)" rx="2" ry="2" />
<text  x="1010.75" y="127.5" >method_dealloc</text>
</g>
<g >
<title>write_size_t (37,911,153 samples, 4.88%)</title><rect x="396.0" y="597" width="57.6" height="15.0" fill="rgb(235,131,10)" rx="2" ry="2" />
<text  x="399.04" y="607.5" >write_..</text>
</g>
<g >
<title>py::&lt;module&gt;:/proj/prismgt-PG0/rbachkaniwala3/code/cpython/Lib/io.py (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="341" width="123.8" height="15.0" fill="rgb(210,201,18)" rx="2" ry="2" />
<text  x="1010.75" y="351.5" >py::&lt;module&gt;:/p..</text>
</g>
<g >
<title>mmap_region (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1093" width="58.5" height="15.0" fill="rgb(211,76,49)" rx="2" ry="2" />
<text  x="1134.48" y="1103.5" >mmap_r..</text>
</g>
<g >
<title>py::_load_unlocked:&lt;frozen importlib._bootstrap&gt; (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="677" width="123.8" height="15.0" fill="rgb(208,170,32)" rx="2" ry="2" />
<text  x="1010.75" y="687.5" >py::_load_unloc..</text>
</g>
<g >
<title>py::foo:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py (656,233,356 samples, 84.50%)</title><rect x="10.7" y="709" width="997.0" height="15.0" fill="rgb(205,162,8)" rx="2" ry="2" />
<text  x="13.65" y="719.5" >py::foo:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py</text>
</g>
<g >
<title>_PyEval_Vector (656,233,356 samples, 84.50%)</title><rect x="10.7" y="725" width="997.0" height="15.0" fill="rgb(251,222,9)" rx="2" ry="2" />
<text  x="13.65" y="735.5" >_PyEval_Vector</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="501" width="123.8" height="15.0" fill="rgb(245,183,23)" rx="2" ry="2" />
<text  x="1010.75" y="511.5" >_PyEval_EvalFra..</text>
</g>
<g >
<title>_PyLong_Add (146,722,604 samples, 18.89%)</title><rect x="230.7" y="677" width="222.9" height="15.0" fill="rgb(222,202,1)" rx="2" ry="2" />
<text  x="233.71" y="687.5" >_PyLong_Add</text>
</g>
<g >
<title>_PyEval_Vector (656,233,356 samples, 84.50%)</title><rect x="10.7" y="885" width="997.0" height="15.0" fill="rgb(218,228,32)" rx="2" ry="2" />
<text  x="13.65" y="895.5" >_PyEval_Vector</text>
</g>
<g >
<title>_PyFunction_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="549" width="123.8" height="15.0" fill="rgb(209,97,25)" rx="2" ry="2" />
<text  x="1010.75" y="559.5" >_PyFunction_Vec..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1189" width="58.5" height="15.0" fill="rgb(254,18,26)" rx="2" ry="2" />
<text  x="1134.48" y="1199.5" >entry_..</text>
</g>
<g >
<title>py::_find_and_load_unlocked:&lt;frozen importlib._bootstrap&gt; (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="757" width="123.8" height="15.0" fill="rgb(221,162,20)" rx="2" ry="2" />
<text  x="1010.75" y="767.5" >py::_find_and_l..</text>
</g>
<g >
<title>main (737,666,026 samples, 94.99%)</title><rect x="10.7" y="1173" width="1120.8" height="15.0" fill="rgb(208,176,23)" rx="2" ry="2" />
<text  x="13.65" y="1183.5" >main</text>
</g>
<g >
<title>py::ABCMeta.register:/proj/prismgt-PG0/rbachkaniwala3/code/cpython/Lib/abc.py (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="261" width="123.8" height="15.0" fill="rgb(207,24,47)" rx="2" ry="2" />
<text  x="1010.75" y="271.5" >py::ABCMeta.reg..</text>
</g>
<g >
<title>py::_LoaderBasics.exec_module:&lt;frozen importlib._bootstrap_external&gt; (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="597" width="123.8" height="15.0" fill="rgb(246,119,45)" rx="2" ry="2" />
<text  x="1010.75" y="607.5" >py::_LoaderBasi..</text>
</g>
<g >
<title>run_mod (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1013" width="997.0" height="15.0" fill="rgb(234,13,45)" rx="2" ry="2" />
<text  x="13.65" y="1023.5" >run_mod</text>
</g>
<g >
<title>_PyEval_Vector (656,233,356 samples, 84.50%)</title><rect x="10.7" y="805" width="997.0" height="15.0" fill="rgb(237,227,7)" rx="2" ry="2" />
<text  x="13.65" y="815.5" >_PyEval_Vector</text>
</g>
<g >
<title>py::&lt;module&gt;:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py (656,233,356 samples, 84.50%)</title><rect x="10.7" y="949" width="997.0" height="15.0" fill="rgb(216,82,8)" rx="2" ry="2" />
<text  x="13.65" y="959.5" >py::&lt;module&gt;:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py</text>
</g>
<g >
<title>do_call_core (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="485" width="123.8" height="15.0" fill="rgb(214,187,0)" rx="2" ry="2" />
<text  x="1010.75" y="495.5" >do_call_core</text>
</g>
<g >
<title>PyGILState_Check (37,273,592 samples, 4.80%)</title><rect x="951.1" y="597" width="56.6" height="15.0" fill="rgb(242,150,52)" rx="2" ry="2" />
<text  x="954.11" y="607.5" >PyGIL..</text>
</g>
<g >
<title>PyObject_Malloc (109,877,031 samples, 14.15%)</title><rect x="286.7" y="645" width="166.9" height="15.0" fill="rgb(226,2,26)" rx="2" ry="2" />
<text  x="289.70" y="655.5" >PyObject_Malloc</text>
</g>
<g >
<title>PyLong_FromLong (37,273,592 samples, 4.80%)</title><rect x="951.1" y="661" width="56.6" height="15.0" fill="rgb(244,133,39)" rx="2" ry="2" />
<text  x="954.11" y="671.5" >PyLon..</text>
</g>
<g >
<title>PyEval_EvalCode (656,233,356 samples, 84.50%)</title><rect x="10.7" y="981" width="997.0" height="15.0" fill="rgb(242,55,41)" rx="2" ry="2" />
<text  x="13.65" y="991.5" >PyEval_EvalCode</text>
</g>
<g >
<title>perf_event_mmap (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1077" width="58.5" height="15.0" fill="rgb(240,115,51)" rx="2" ry="2" />
<text  x="1134.48" y="1087.5" >perf_e..</text>
</g>
<g >
<title>pymain_run_file (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1093" width="997.0" height="15.0" fill="rgb(246,214,44)" rx="2" ry="2" />
<text  x="13.65" y="1103.5" >pymain_run_file</text>
</g>
<g >
<title>_PyLong_FromMedium (37,273,592 samples, 4.80%)</title><rect x="951.1" y="645" width="56.6" height="15.0" fill="rgb(238,174,11)" rx="2" ry="2" />
<text  x="954.11" y="655.5" >_PyLo..</text>
</g>
<g >
<title>PyObject_Free (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="85" width="123.8" height="15.0" fill="rgb(230,229,34)" rx="2" ry="2" />
<text  x="1010.75" y="95.5" >PyObject_Free</text>
</g>
<g >
<title>cfunction_vectorcall_FASTCALL_KEYWORDS (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="981" width="123.8" height="15.0" fill="rgb(235,193,52)" rx="2" ry="2" />
<text  x="1010.75" y="991.5" >cfunction_vecto..</text>
</g>
<g >
<title>run_eval_code_obj (656,233,356 samples, 84.50%)</title><rect x="10.7" y="997" width="997.0" height="15.0" fill="rgb(253,20,4)" rx="2" ry="2" />
<text  x="13.65" y="1007.5" >run_eval_code_obj</text>
</g>
<g >
<title>_PyObject_Free (35,978,824 samples, 4.63%)</title><rect x="841.8" y="597" width="54.6" height="15.0" fill="rgb(218,77,22)" rx="2" ry="2" />
<text  x="844.77" y="607.5" >_PyOb..</text>
</g>
<g >
<title>rangeiter_next (37,273,592 samples, 4.80%)</title><rect x="951.1" y="677" width="56.6" height="15.0" fill="rgb(241,111,34)" rx="2" ry="2" />
<text  x="954.11" y="687.5" >range..</text>
</g>
<g >
<title>pyrun_file (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1029" width="997.0" height="15.0" fill="rgb(224,217,47)" rx="2" ry="2" />
<text  x="13.65" y="1039.5" >pyrun_file</text>
</g>
<g >
<title>PyObject_IsSubclass (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="165" width="123.8" height="15.0" fill="rgb(208,75,18)" rx="2" ry="2" />
<text  x="1010.75" y="175.5" >PyObject_IsSubc..</text>
</g>
<g >
<title>_PyGILState_GetThisThreadState (35,990,374 samples, 4.63%)</title><rect x="677.4" y="613" width="54.7" height="15.0" fill="rgb(238,76,14)" rx="2" ry="2" />
<text  x="680.43" y="623.5" >_PyGI..</text>
</g>
<g >
<title>_PyFunction_Vectorcall (656,233,356 samples, 84.50%)</title><rect x="10.7" y="741" width="997.0" height="15.0" fill="rgb(234,124,45)" rx="2" ry="2" />
<text  x="13.65" y="751.5" >_PyFunction_Vectorcall</text>
</g>
<g >
<title>_PyFunction_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="709" width="123.8" height="15.0" fill="rgb(224,83,46)" rx="2" ry="2" />
<text  x="1010.75" y="719.5" >_PyFunction_Vec..</text>
</g>
<g >
<title>_PyFunction_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="629" width="123.8" height="15.0" fill="rgb(224,133,34)" rx="2" ry="2" />
<text  x="1010.75" y="639.5" >_PyFunction_Vec..</text>
</g>
<g >
<title>PyImport_ImportModuleLevelObject (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="933" width="123.8" height="15.0" fill="rgb(228,213,21)" rx="2" ry="2" />
<text  x="1010.75" y="943.5" >PyImport_Import..</text>
</g>
<g >
<title>_PyEval_Vector (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="853" width="123.8" height="15.0" fill="rgb(235,55,45)" rx="2" ry="2" />
<text  x="1010.75" y="863.5" >_PyEval_Vector</text>
</g>
<g >
<title>py::bar:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py (656,233,356 samples, 84.50%)</title><rect x="10.7" y="789" width="997.0" height="15.0" fill="rgb(246,137,3)" rx="2" ry="2" />
<text  x="13.65" y="799.5" >py::bar:/proj/prismgt-PG0/rbachkaniwala3/code/foo.py</text>
</g>
<g >
<title>_PyMem_DebugFree (252,144,871 samples, 32.47%)</title><rect x="568.0" y="629" width="383.1" height="15.0" fill="rgb(209,128,36)" rx="2" ry="2" />
<text  x="571.00" y="639.5" >_PyMem_DebugFree</text>
</g>
<g >
<title>PyObject_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="645" width="123.8" height="15.0" fill="rgb(221,134,33)" rx="2" ry="2" />
<text  x="1010.75" y="655.5" >PyObject_Vector..</text>
</g>
<g >
<title>PyObject_Vectorcall (656,233,356 samples, 84.50%)</title><rect x="10.7" y="837" width="997.0" height="15.0" fill="rgb(218,70,3)" rx="2" ry="2" />
<text  x="13.65" y="847.5" >PyObject_Vectorcall</text>
</g>
<g >
<title>_Py_Dealloc (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="133" width="123.8" height="15.0" fill="rgb(208,49,23)" rx="2" ry="2" />
<text  x="1010.75" y="143.5" >_Py_Dealloc</text>
</g>
<g >
<title>PyObject_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="565" width="123.8" height="15.0" fill="rgb(243,34,13)" rx="2" ry="2" />
<text  x="1010.75" y="575.5" >PyObject_Vector..</text>
</g>
<g >
<title>_PyFunction_Vectorcall (656,233,356 samples, 84.50%)</title><rect x="10.7" y="901" width="997.0" height="15.0" fill="rgb(216,51,36)" rx="2" ry="2" />
<text  x="13.65" y="911.5" >_PyFunction_Vectorcall</text>
</g>
<g >
<title>ksys_mmap_pgoff (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1141" width="58.5" height="15.0" fill="rgb(221,52,45)" rx="2" ry="2" />
<text  x="1134.48" y="1151.5" >ksys_m..</text>
</g>
<g >
<title>PyGILState_Check (38,618,620 samples, 4.97%)</title><rect x="509.3" y="629" width="58.7" height="15.0" fill="rgb(219,116,19)" rx="2" ry="2" />
<text  x="512.32" y="639.5" >PyGILS..</text>
</g>
<g >
<title>init_sys_streams (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="1061" width="123.8" height="15.0" fill="rgb(231,193,54)" rx="2" ry="2" />
<text  x="1010.75" y="1071.5" >init_sys_streams</text>
</g>
<g >
<title>setup_new_exec (429,862 samples, 0.06%)</title><rect x="10.0" y="1093" width="0.7" height="15.0" fill="rgb(230,222,7)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" ></text>
</g>
<g >
<title>_PyEval_Vector (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="357" width="123.8" height="15.0" fill="rgb(218,113,21)" rx="2" ry="2" />
<text  x="1010.75" y="367.5" >_PyEval_Vector</text>
</g>
<g >
<title>_PyEval_Vector (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="773" width="123.8" height="15.0" fill="rgb(231,153,16)" rx="2" ry="2" />
<text  x="1010.75" y="783.5" >_PyEval_Vector</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="821" width="123.8" height="15.0" fill="rgb(251,229,27)" rx="2" ry="2" />
<text  x="1010.75" y="831.5" >_PyEval_EvalFra..</text>
</g>
<g >
<title>_PyLong_FromMedium (109,877,031 samples, 14.15%)</title><rect x="286.7" y="661" width="166.9" height="15.0" fill="rgb(219,139,40)" rx="2" ry="2" />
<text  x="289.70" y="671.5" >_PyLong_FromMedium</text>
</g>
<g >
<title>PyObject_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="229" width="123.8" height="15.0" fill="rgb(227,148,42)" rx="2" ry="2" />
<text  x="1010.75" y="239.5" >PyObject_Vector..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (429,862 samples, 0.06%)</title><rect x="10.0" y="1189" width="0.7" height="15.0" fill="rgb(245,79,28)" rx="2" ry="2" />
<text  x="13.00" y="1199.5" ></text>
</g>
<g >
<title>all (776,611,945 samples, 100%)</title><rect x="10.0" y="1237" width="1180.0" height="15.0" fill="rgb(212,28,38)" rx="2" ry="2" />
<text  x="13.00" y="1247.5" ></text>
</g>
<g >
<title>PyObject_Vectorcall (656,233,356 samples, 84.50%)</title><rect x="10.7" y="917" width="997.0" height="15.0" fill="rgb(211,85,17)" rx="2" ry="2" />
<text  x="13.65" y="927.5" >PyObject_Vectorcall</text>
</g>
<g >
<title>__do_execve_file.isra.0 (429,862 samples, 0.06%)</title><rect x="10.0" y="1141" width="0.7" height="15.0" fill="rgb(241,25,45)" rx="2" ry="2" />
<text  x="13.00" y="1151.5" ></text>
</g>
<g >
<title>_PyMem_DebugRawMalloc (73,897,771 samples, 9.52%)</title><rect x="341.4" y="613" width="112.2" height="15.0" fill="rgb(227,121,54)" rx="2" ry="2" />
<text  x="344.37" y="623.5" >_PyMem_DebugR..</text>
</g>
<g >
<title>pymain_run_python (656,233,356 samples, 84.50%)</title><rect x="10.7" y="1109" width="997.0" height="15.0" fill="rgb(216,76,2)" rx="2" ry="2" />
<text  x="13.65" y="1119.5" >pymain_run_python</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="325" width="123.8" height="15.0" fill="rgb(242,195,50)" rx="2" ry="2" />
<text  x="1010.75" y="335.5" >_PyEval_EvalFra..</text>
</g>
<g >
<title>__x64_sys_mmap (38,516,057 samples, 4.96%)</title><rect x="1131.5" y="1157" width="58.5" height="15.0" fill="rgb(213,43,43)" rx="2" ry="2" />
<text  x="1134.48" y="1167.5" >__x64_..</text>
</g>
<g >
<title>PyObject_Vectorcall (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="805" width="123.8" height="15.0" fill="rgb(233,191,53)" rx="2" ry="2" />
<text  x="1010.75" y="815.5" >PyObject_Vector..</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="245" width="123.8" height="15.0" fill="rgb(206,84,17)" rx="2" ry="2" />
<text  x="1010.75" y="255.5" >_PyEval_EvalFra..</text>
</g>
<g >
<title>PyObject_GC_Del (81,432,670 samples, 10.49%)</title><rect x="1007.7" y="101" width="123.8" height="15.0" fill="rgb(239,189,51)" rx="2" ry="2" />
<text  x="1010.75" y="111.5" >PyObject_GC_Del</text>
</g>
</g>
</svg>
